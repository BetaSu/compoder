[
    {
        "title": "Shadcn/UI Codegen",
        "description": "Code generator based on Shadcn/UI",
        "fullStack": "React",
        "guides": [
            "Generate a login page",
            "Generate a Table component, include 3 columns: name, age, address"
        ],
        "model": "gpt-4o",
        "codeRendererUrl": "http://localhost:3001",
        "rules": [
            {
                "type": "public-components",
                "description": "Define which public components to use",
                "dataSet": [
                    "shadcn/ui"
                ]
            },
            {
                "type": "styles",
                "description": "Define the rules for generating styles",
                "prompt": "Styles must be written using tailwindcss with full dark/light mode compatibility. Use Tailwind's dark mode utilities (dark:class-name) for theme variants. Prefer using color-scheme-neutral classes or theme-specific variants (dark:bg-gray-800/light:bg-white) to ensure consistent appearance in both dark and light modes."
            },
            {
                "type": "attention-rules",
                "description": "Attention rules for the code generator",
                "prompt": "Only use the following npm packages in the generated code: react, react-dom, lucide-react, next/link, next/image, @/lib/utils, framer-motion, react-hook-form, recharts, zod, and components from @/components/ui/* (shadcn base components). Do not import or use any other packages. Specifically, DO NOT use @hookform/resolvers/zod package - instead, manually set up form validation with zod without using this resolver."
            }
        ]
    },
    {
        "title": "Ant Design Codegen",
        "description": "Code generator based on React and Ant Design",
        "fullStack": "React",
        "guides": [
            "Generate a login page",
            "Generate a Table component, include 3 columns: name, age, address"
        ],
        "model": "gpt-4o",
        "codeRendererUrl": "http://localhost:3002",
        "rules": [
            {
                "type": "public-components",
                "description": "Define which public components to use",
                "dataSet": [
                    "antd",
                    "@ant-design/icons"
                ]
            },
            {
                "type": "styles",
                "description": "Define the rules for generating styles",
                "prompt": "Use styled-components for styles"
            },
            {
                "type": "file-structure",
                "description": "Define the file structure for the project",
                "prompt": "Output component code in XML format as follows:\n<ComponentArtifact name=\"ComponentName\">\n  <ComponentFile fileName=\"App.tsx\" isEntryFile=\"true\">\n    import { ComponentName } from './ComponentName';\n    \n    const mockProps = {\n      // Define mock data here\n    };\n    \n    export default function App() {\n      return <ComponentName {...mockProps} />;\n    }\n  </ComponentFile>\n  \n  <ComponentFile fileName=\"[ComponentName].tsx\">\n    // Main component implementation\n    // Split into multiple files if exceeds 500 lines\n    export const ComponentName = () => {\n      // Component implementation\n    }\n  </ComponentFile>\n\n  <ComponentFile fileName=\"helpers.ts\">\n    // Helper functions (optional)\n  </ComponentFile>\n\n  <ComponentFile fileName=\"interface.ts\">\n    // Type definitions for component props\n    // All API-interacting data must be defined as props:\n    // - initialData for component initialization\n    // - onChange, onSave, onDelete etc. for data modifications\n  </ComponentFile>\n  <ComponentFile fileName=\"styles.ts\">\n    // Styles for the component, must be written using styled-components only\n  </ComponentFile>\n</ComponentArtifact>"
            },
            {
                "type": "attention-rules",
                "description": "Attention rules for the code generator",
                "prompt": "Only use the following npm packages in the generated code: react, react-dom, antd, @ant-design/icons, styled-components. Do not import or use any other packages. When importing from 'antd' and '@ant-design/icons', ONLY use named imports like: import { Button, TextField } from 'antd'; import { Delete, Edit } from '@ant-design/icons'; - DO NOT use default imports, namespace imports, or side effect imports for these packages."
            }
        ]
    },
    {
        "title": "Mui Codegen",
        "description": "Code generator based on React and Mui",
        "fullStack": "React",
        "guides": [
            "Generate a login page",
            "Generate a Table component, include 3 columns: name, age, address"
        ],
        "model": "gpt-4o",
        "codeRendererUrl": "http://localhost:3003",
        "rules": [
            {
                "type": "public-components",
                "description": "Define which public components to use",
                "dataSet": [
                    "@mui/material",
                    "@mui/icons-material"
                ]
            },
            {
                "type": "styles",
                "description": "Define the rules for generating styles",
                "prompt": "All styles must be written using sx prop only"
            },
            {
                "type": "attention-rules",
                "description": "Attention rules for the code generator",
                "prompt": "Only use the following npm packages in the generated code: react, react-dom, @mui/material, @mui/icons-material, @mui/x-date-pickers, @mui/x-tree-view. Do not import or use any other packages. When importing from '@mui/material' and '@mui/icons-material', ONLY use named imports like: import { Button, TextField } from '@mui/material'; import { Delete, Edit } from '@mui/icons-material'; - DO NOT use default imports, namespace imports, or side effect imports for these packages."
            }
        ]
    },
    {
        "title": "Element Plus Codegen",
        "description": "Code generator based on Element Plus",
        "fullStack": "Vue",
        "guides": [
            "Generate a login page",
            "Generate a Table component, include 3 columns: name, age, address"
        ],
        "model": "gpt-4o",
        "codeRendererUrl": "http://localhost:3004",
        "rules": [
            {
                "type": "public-components",
                "description": "Define which public components to use",
                "dataSet": [
                    "element-plus"
                ]
            },
            {
                "type": "file-structure",
                "description": "Define the file structure for the project",
                "prompt": "Output component code in XML format as follows: <ComponentArtifact name=\"ComponentName\"><ComponentFile fileName=\"App.vue\" isEntryFile=\"true\"><template>\n  <!-- Write template content here -->\n</template>\n\n<script>\n// Import required components and dependencies\nimport { ... } from '...'\n\nexport default {\n  name: 'ComponentName',\n  \n  components: {\n    // Register components\n  },\n\n  props: {\n    // Component properties\n    // IMPORTANT: Every prop MUST include a default value\n    propName: {\n      type: Type,\n      default: defaultValue,\n      required: false\n    }\n  },\n  \n  data() {\n    return {\n      // Component data\n    }\n  },\n  \n  computed: {\n    // Computed properties\n  },\n  \n  methods: {\n    // Methods\n  }\n}\n</script>\n\n<style scoped>\n/* Component styles */\n/* IMPORTANT: Do NOT use @apply in styles. Write CSS rules directly. */\n</style></ComponentFile></ComponentArtifact>\n\nIMPORTANT RULES:\n1. Every prop MUST include a default value\n2. Do NOT use @apply in styles. Write CSS rules directly."
            }
        ]
    },
    {
        "title": "My Company Private Component Codegen",
        "description": "Code generator based on private components",
        "fullStack": "React",
        "guides": [
            "Generate a login page",
            "Generate a Table component, include 3 columns: name, age, address"
        ],
        "model": "gpt-4o",
        "codeRendererUrl": "http://localhost:3005",
        "rules": [
            {
                "type": "public-components",
                "description": "Define which public components to use",
                "dataSet": [
                    "private-components"
                ]
            }
        ]
    }
]